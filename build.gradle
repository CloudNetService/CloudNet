defaultTasks 'clean', 'build', 'test', 'jar'

allprojects {

    def major = 3, minor = 1, patch = 0, versionType = "RELEASE"

    group 'de.dytanic.cloudnet'
    version "$major.$minor.$patch-$versionType"

    repositories {

        mavenCentral()

        maven {
            name 'spongepowered'
            url 'https://repo.spongepowered.org/maven'
        }

        maven {
            name 'spigotmc-1'
            url 'https://repo.md-5.net/service/local/repositories/repobo-rel/content/'
        }

        maven {
            name 'spigotmc-2'
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }

        maven {
            name 'md-5'
            url 'https://repo.md-5.net/content/repositories/repobo-rel/'
        }

        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }

        maven {
            name 'velocity'
            url 'https://repo.velocitypowered.com/snapshots/'
        }

        maven {
            name 'nukkix'
            url 'https://repo.nukkitx.com/maven-snapshots'
        }
    }

    project.ext {

        cloudNetCodeName = 'Tsunami'

        //Dependencies
        dependencyLombokVersion = '1.18.6'
        dependencyH2Version = '1.4.197'
        dependencyGsonVersion = '2.8.2'
        dependencyNettyVersion = '4.1.36.Final'
        dependencyJLine2Version = '2.14.6'
        dependencyJAnsiVersion = '1.17.1'
        dependencyNextCloudJavaAPIVersion = '11.0.3'
        dependencyBukkitVersion = '1.14.4-R0.1-SNAPSHOT'
        dependencySpongeVersion = '7.0.0'
        dependencyBungeeCordVersion = '1.14-SNAPSHOT'
        dependencyVelocityVersion = '1.0.0-SNAPSHOT'
        //dependencyGoMintVersion = '1.0.0-SNAPSHOT'
        dependencyNukkitXVersion = '1.0-SNAPSHOT'

        testJunitVersion = '4.12'

        //file
        cloudnetLauncherFile = 'launcher.jar'
        cloudnetCommonFile = 'common.jar'
        cloudnetWrapperFile = 'wrapper.jar'

        //compiled files for launcher
        cloudnetRunnableOutFileName = 'cloudnet.jar'
        cloudnetRunnableOutCNLFileName = 'cloudnet.cnl'

        cloudnetDriverOutFileName = 'driver.jar'
        cloudnetDriverOutCNLFileName = 'driver.cnl'

        //cloudNet modules
        cloudnetModuleBridgeFileName = 'cloudnet-bridge.jar'
        cloudnetModuleSignsFileName = 'cloudnet-signs.jar'
        cloudnetModuleSmartFileName = 'cloudnet-smart.jar'
        cloudnetModuleSyncProxyFileName = 'cloudnet-syncproxy.jar'
        cloudnetModuleCloudflareFileName = 'cloudnet-cloudflare.jar'
        cloudnetModuleCloudPermsFileName = 'cloudnet-cloudperms.jar'
        cloudnetModuleReportFileName = 'cloudnet-report.jar'
        cloudnetModuleRestFileName = 'cloudnet-rest.jar'
        cloudnetModuleNextCloudFileName = 'cloudnet-storage-nextcloud.jar'
        cloudnetModuleStorageFTPFileName = 'cloudnet-storage-ftp.jar'
        cloudnetModuleDatabaseMySQLFileName = 'cloudnet-database-mysql.jar'
    }


    ext.createCnlFile = { Project pro, String fileName ->

        def stringBuilder = new StringBuilder("# CloudNet $cloudNetCodeName ${version}\n\n")
                .append("# repositories\n\n")
                .append("repo maven http://central.maven.org/maven2\n")
                .append("# dependencies\n\n")

        pro.configurations.compile.resolvedConfiguration.resolvedArtifacts.forEach({

            if (it.moduleVersion.id.group != project.group) {

                stringBuilder
                        .append("include maven ")
                        .append(it.moduleVersion.id.group).append(" ")
                        .append(it.moduleVersion.id.name).append(" ")
                        .append(it.moduleVersion.id.version)

                if (it.classifier != null) stringBuilder.append(" ").append(it.classifier)

                stringBuilder.append("\n")
            }
        })

        file("$pro.buildDir/libs/" + fileName).text = stringBuilder.toString()
    }

    String hashValue = null
    ext.getCurrentCommitHash = {


        if (hashValue == null) {
            try {
                def hashStdOut = new ByteArrayOutputStream()

                exec {
                    commandLine "git", "rev-parse", "--short", "HEAD"
                    standardOutput = hashStdOut
                }

                hashValue = new String(hashStdOut.toByteArray()).substring(0, 7)

            } catch (Exception ex) {
                hashValue = "unknown"
            }
        }

        return hashValue
    }
}

subprojects {

    if (project.name == 'cloudnet-modules' || project.name == 'cloudnet-plugins') return

    apply plugin: 'java'
    apply plugin: 'maven'

    compileJava {
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compileOnly group: 'org.projectlombok', name: 'lombok', version: dependencyLombokVersion
        testCompile group: 'junit', name: 'junit', version: testJunitVersion
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: dependencyLombokVersion
    }


    task sourceJar(type: Jar, dependsOn: classes) {

        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task deploymentJar(type: Jar, dependsOn: sourceJar) {

        def pro = project
        from sourceSets.main.output

        doLast {
            pom {

            }.writeTo("$buildDir/libs/${pro.name}-${pro.version}.pom")
        }
    }
}

task allJavadoc(type: Javadoc) {

    dependsOn ':cloudnet-launcher:jar'

    destinationDir = new File(buildDir, 'javadoc')
    title = 'CloudNet documentation ' + version

    options.encoding = 'UTF-8'
    options.windowTitle = 'CloudNet Javadocs'
    options.memberLevel = JavadocMemberLevel.PRIVATE

    options.addStringOption('Xdoclint:none', '-quiet')

    def exportedProjects = subprojects.findAll {
        it.name != 'cloudnet-modules' && it.name != 'cloudnet-plugins'
    }.collect { it.path }

    source = exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    failOnError = false
}
