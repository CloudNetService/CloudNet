/*
 * Copyright 2019-2021 CloudNetService team & contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'org.cadixdev.licenser' version '0.6.1' apply false
}

defaultTasks 'build', 'checkLicenses', 'test', 'jar'

allprojects {

  def major = 3, minor = 5, patch = 0, versionType = "SNAPSHOT"

  group 'de.dytanic.cloudnet'
  version "$major.$minor.$patch-$versionType"

  repositories {
    mavenCentral()

    maven {
      name 'spongepowered'
      url 'https://repo.spongepowered.org/maven'
    }

    maven {
      name 'spigotmc-repo'
      url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    maven {
      name 'waterdog'
      url 'https://repo.waterdog.dev/artifactory/main/'
    }

    maven {
      name 'velocity'
      url 'https://repo.velocitypowered.com/snapshots/'
    }

    maven {
      name 'sonatype'
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
      name 'vault'
      url 'https://repo.md-5.net/repository/releases'
    }

    maven {
      name 'jitpack.io'
      url 'https://jitpack.io'
    }

    maven {
      name 'nukkix'
      url 'https://repo.nukkitx.com/maven-snapshots'
    }
  }

  project.ext {

    cloudNetCodeName = 'Blizzard'

    //Dependencies
    dependencyGuavaVersion = '30.1.1-jre'
    dependencyAnnotationsVersion = '22.0.0'
    dependencyLombokVersion = '1.18.20'
    dependencyH2Version = '1.4.197' // do not update, leads to database incompatibility
    dependencyXodusVersion = '1.3.232'
    dependencyGsonVersion = '2.8.8'
    dependencyNettyVersion = '4.1.67.Final'
    dependencyJLineVersion = '3.20.0'
    dependencyJAnsiVersion = '2.3.4'
    dependencySpigotApiVersion = '1.17-R0.1-SNAPSHOT'
    dependencySpongeVersion = '7.3.0'
    dependencyBungeeCordVersion = '1.17-R0.1-SNAPSHOT'
    dependencyVelocityVersion = '3.0.0'
    dependencyNukkitXVersion = '1.0-SNAPSHOT'
    dependencyGoMintVersion = '1.0.0-SNAPSHOT'
    dependencyWaterdogPEVersion = '1.1.2-SNAPSHOT'
    dependencyMysqlConnectorJavaVersion = '8.0.26'
    dependencyMongoJavaDriverVersion = '4.3.1'
    dependencyHikariCpVersion = '5.0.0'
    dependencyVaultVersion = '1.7.1'
    dependencyProtocolLibVersion = 'master-SNAPSHOT'
    dependencyNpcLibVersion = 'development-SNAPSHOT'
    dependencyCommonsNetVersion = '3.8.0'
    dependencyJschVersion = '0.1.55'
    dependencyJavassistVersion = '3.28.0-GA'
    dependencyJJWTVersion = '0.11.2'
    dependencySlf4jVersion = '1.7.32'

    testJunitVersion = '5.8.0-RC1'
    testMockitoVersion = '3.12.3'
    testBcpkixJdk15OnVersion = '1.69'
    testTyrusVersion = '2.0.0'

    buildCheckstyleToolVersion = '8.45.1'

    //file
    cloudnetLauncherFile = 'launcher.jar'
    cloudnetCommonFile = 'common.jar'
    cloudnetWrapperFile = 'wrapper.jar'

    //compiled files for launcher
    cloudnetRunnableOutFileName = 'cloudnet.jar'
    cloudnetRunnableOutCNLFileName = 'cloudnet.cnl'

    cloudnetDriverOutFileName = 'driver.jar'
    cloudnetDriverOutCNLFileName = 'driver.cnl'

    //cloudNet modules
    cloudnetModuleBridgeFileName = 'cloudnet-bridge.jar'
    cloudnetModuleLabyModFileName = 'cloudnet-labymod.jar'
    cloudnetModuleSignsFileName = 'cloudnet-signs.jar'
    cloudnetModuleNPCsFileName = 'cloudnet-npcs.jar'
    cloudnetModuleSmartFileName = 'cloudnet-smart.jar'
    cloudnetModuleSyncProxyFileName = 'cloudnet-syncproxy.jar'
    cloudnetModuleCloudflareFileName = 'cloudnet-cloudflare.jar'
    cloudnetModuleCloudPermsFileName = 'cloudnet-cloudperms.jar'
    cloudnetModuleReportFileName = 'cloudnet-report.jar'
    cloudnetModuleRestFileName = 'cloudnet-rest.jar'
    cloudnetModuleNextCloudFileName = 'cloudnet-storage-nextcloud.jar'
    cloudnetModuleStorageFTPFileName = 'cloudnet-storage-ftp.jar'
    cloudnetModuleDatabaseMySQLFileName = 'cloudnet-database-mysql.jar'
    cloudnetModuleDatabaseMongodbFileName = 'cloudnet-database-mongodb.jar'
  }

  ext.createCnlFile = { Project pro, String fileName ->

    def stringBuilder = new StringBuilder("# CloudNet $cloudNetCodeName ${version}\n\n")
      .append("# repositories\n\n")
      .append("repo maven https://repo1.maven.org/maven2\n")
      .append("# dependencies\n\n")

    pro.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.forEach({

      if (it.moduleVersion.id.group != project.group) {

        stringBuilder
          .append("include maven ")
          .append(it.moduleVersion.id.group).append(" ")
          .append(it.moduleVersion.id.name).append(" ")
          .append(it.moduleVersion.id.version)

        if (it.classifier != null) stringBuilder.append(" ").append(it.classifier)

        stringBuilder.append("\n")
      }
    })

    file("$pro.buildDir/libs/" + fileName).text = stringBuilder.toString()
  }

  String hashValue = null
  ext.getCurrentCommitHash = {
    if (hashValue == null) {
      try {
        def hashStdOut = new ByteArrayOutputStream()

        exec {
          commandLine "git", "rev-parse", "--short", "HEAD"
          standardOutput = hashStdOut
        }

        hashValue = new String(hashStdOut.toByteArray()).substring(0, 7)

      } catch (Exception ignored) {
        hashValue = "unknown"
      }
    }

    return hashValue
  }
}

subprojects {

  if (project.name == 'cloudnet-modules' || project.name == 'cloudnet-plugins') return

  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'org.cadixdev.licenser'

  compileJava {
    options.encoding = 'UTF-8'
  }

  compileTestJava {
    options.encoding = 'UTF-8'
  }

  javadoc {
    options.encoding = 'UTF-8'
  }

  license {
    include '**/*.java'
    header = project.rootProject.file('LICENSE_HEADER')
  }

  checkstyle {
    toolVersion = project.ext.buildCheckstyleToolVersion
  }

  tasks.withType(Checkstyle) {
    maxErrors = 0
    maxWarnings = 0
    configFile = project.rootProject.file('checkstyle.xml')
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  dependencies {
    // lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: dependencyLombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: dependencyLombokVersion
    // code flow annotations
    compileOnly group: 'org.jetbrains', name: 'annotations', version: dependencyAnnotationsVersion
    // test libraries
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: testJunitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: testJunitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: testJunitVersion
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: testMockitoVersion
  }

  jar {
    from rootProject.file('LICENSE')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
  }

  test {
    useJUnitPlatform()
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
  }

  task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
      }
    }

    repositories {
      maven {
        if (project.version.endsWith("RELEASE")) {
          url 'https://repo.cloudnetservice.eu/repository/releases/'
        } else {
          url 'https://repo.cloudnetservice.eu/repository/snapshots/'
        }

        credentials {
          username = project.hasProperty("mavenUser") ? project.property("mavenUser") : ""
          password = project.hasProperty("mavenPassword") ? project.property("mavenPassword") : ""
        }
      }
    }
  }

}

task allJavadoc(type: Javadoc) {
  dependsOn ':cloudnet-launcher:jar'

  destinationDir = new File(buildDir, 'javadoc')
  title = 'CloudNet documentation ' + version

  options.encoding = 'UTF-8'
  options.windowTitle = 'CloudNet Javadocs'
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.addBooleanOption "-no-module-directories", true

  options.addStringOption('Xdoclint:none', '-quiet')

  def exportedProjects = subprojects.findAll {
    it.name != 'cloudnet-modules' && it.name != 'cloudnet-plugins'
  }.collect { it.path }

  source = exportedProjects.collect { project(it).sourceSets.main.allJava }
  classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
  failOnError = false
}
