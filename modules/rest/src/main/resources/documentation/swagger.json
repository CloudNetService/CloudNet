{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "CloudNet's rest API version 2 is the next generation in CloudNet's rest history. It has\ndefinitely more opportunities than the previous version of it and provides\na lot of methods to manage and control the CloudNet node and cluster behaviour.\n\nThe API is based on http/https requests and mostly JSON responses. You need\nto send your session bearer token when you make a request. The token can be\nobtained by sending a request to the /auth route. Most of the routes require\nan authentication and a permission which must be set to access the endpoint.\n\nAll the responses contain a `success` boolean (if they are JSON responses) giving\ninformation whether or not the request was handled successfully. If that boolean is\n`false` an extra `reason` field is appended to the JSON entity defining the cause\nof the failure.\n\nEvery rest rout is fixed to a version number and every call must contain one.\nThe latest one is 2. The latest stable endpoint base URL is\n`http(s)://{host}:{port}/api/v2/`. Host and port is the one defined in your\nCloudNet's node config.json `httpListeners` section. If you want to use https\nyou have to configure the web SSL settings in the same file.\n",
    "version" : "2",
    "title" : "CloudNet",
    "contact" : {
      "url" : "https://cloudnetservice.eu",
      "name" : "CloudNetService"
    },
    "license" : {
      "name" : "Apache license, version 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs" : {
    "description" : "Find out more about CloudNet and it's setup",
    "url" : "https://cloudnetservice.eu"
  },
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Session Management",
    "description" : "Management of the user's rest api authentication and session"
  }, {
    "name" : "Node",
    "description" : "Access to some node functions the request is sent to"
  }, {
    "name" : "Cluster",
    "description" : "Management of the cluster the current node is part of",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/setup/cluster",
      "description" : "More information"
    }
  }, {
    "name" : "Database",
    "description" : "Management of the cloudnet internal database"
  }, {
    "name" : "Groups",
    "description" : "Management of the cloudnet group system",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/components/groups",
      "description" : "More information"
    }
  }, {
    "name" : "Permissions",
    "description" : "Management of the cloudnet permission system",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/modules/cloudperms",
      "description" : "More information"
    }
  }, {
    "name" : "Player",
    "description" : "Management of cloudnet players",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/commands/players",
      "description" : "More information"
    }
  }, {
    "name" : "Tasks",
    "description" : "Management of the cloudnet task system",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/components/tasks",
      "description" : "More information"
    }
  }, {
    "name" : "Services",
    "description" : "Management of the services which are running in the cluster",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/components/services",
      "description" : "More information"
    }
  }, {
    "name" : "Template Storage",
    "description" : "Management of the templates",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/components/template-storages"
    }
  }, {
    "name" : "Templates",
    "description" : "Management of the templates",
    "externalDocs" : {
      "url" : "https://cloudnetservice.eu/docs/3.3/components/templates",
      "description" : "More information"
    }
  }, {
    "name" : "Service Versions",
    "description" : "Management of service versions"
  }, {
    "name" : "Modules",
    "description" : "Management of the modules"
  } ],
  "paths" : {
    "/cluster" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Lists all nodes",
        "description" : "Lists all nodes which are registered in the node. This includes nodes\nwhich are currently not connected to the node. If they are not connected\navailable will be `false` and the `nodeInfoSnapshot` will be null.\n",
        "operationId" : "cluster",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "nodes" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/NetworkClusterNodeInfoSnapshot"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "put" : {
        "requestBody" : {
          "required" : true,
          "description" : "The new node configuration entry.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkClusterNode"
              }
            }
          }
        },
        "tags" : [ "Cluster" ],
        "summary" : "Updates a node",
        "description" : "Changes the configuration of a specific node in the local node's config\nfile. The updated will be pushed live to the node cluster settings. That\ndoes not mean that the node tries to connect to the other one.\n",
        "operationId" : "clusterUpdate",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The node configuration entry.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkClusterNode"
              }
            }
          }
        },
        "tags" : [ "Cluster" ],
        "summary" : "Creates a new node",
        "description" : "Creates a node in the node's local configuration and updates it live to\nthe node cluster settings. That does not mean that the node tries to\nconnect to the other one.\n",
        "operationId" : "clusterCreate",
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/cluster/{uniqueId}" : {
      "parameters" : [ {
        "name" : "uniqueId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Shows a unique node",
        "description" : "Shows a specific node according to the unique id provided in the request\npath if the node exists.\n",
        "operationId" : "clusterInfo",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "$ref" : "#/components/schemas/NetworkClusterNodeInfoSnapshot"
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Deletes a node",
        "description" : "Deletes a node from the config of the local node and pushes the changes\nlive to the local cluster settings. That does not mean that the node\ngets disconnected.\n",
        "operationId" : "clusterDelete",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/cluster/{uniqueId}/command" : {
      "parameters" : [ {
        "name" : "uniqueId",
        "in" : "path",
        "required" : true,
        "description" : "The node id to execute the command on",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The command to send to the node",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "command" : {
                    "type" : "string",
                    "example" : "perms user derklaro add permission * 1"
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Cluster" ],
        "summary" : "Sends a command to the given node",
        "description" : "Sends a command to a specific node in the cluster.",
        "operationId" : "clusterCommand",
        "responses" : {
          "200" : {
            "description" : "The command was executed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "example" : [ "Command Response Line1", "Command Response Line2" ]
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/node" : {
      "get" : {
        "security" : [ { }, {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "Node" ],
        "summary" : "Node info",
        "description" : "Information about the node the rest listener belongs to",
        "operationId" : "generalInfo",
        "responses" : {
          "200" : {
            "description" : "Information about the node the request was sent to",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeInfo"
                }
              }
            }
          },
          "204" : {
            "description" : "If the request has no Authorization header set the node will just\nanswer with a 204 to indicate that the listener is up and running.\n"
          }
        }
      }
    },
    "/node/liveConsole" : {
      "get" : {
        "tags" : [ "Node" ],
        "summary" : "Live console",
        "description" : "Upgrades the connection to a web socket connection and sends all new command\nlines received to the connection.\n",
        "responses" : {
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/node/reload" : {
      "parameters" : [ {
        "name" : "type",
        "in" : "query",
        "required" : false,
        "description" : "The reload type",
        "schema" : {
          "type" : "string",
          "enum" : [ "all", "config" ],
          "default" : "all"
        }
      } ],
      "get" : {
        "tags" : [ "Node" ],
        "summary" : "Reloads the node the request is sent to",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/node/config" : {
      "get" : {
        "tags" : [ "Node" ],
        "summary" : "Get the current configuration file of the node the request is sent to",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "$ref" : "#/components/schemas/NodeConfiguration"
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "put" : {
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NodeConfiguration"
              }
            }
          }
        },
        "tags" : [ "Node" ],
        "summary" : "Updates the configuration file of the node the request is sent to",
        "description" : "To add/remove a node from the configuration please use the cluster \nroutes to add/remove a node\n",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database" : {
      "get" : {
        "tags" : [ "Database" ],
        "summary" : "Lists all database names",
        "operationId" : "listDatabase",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "example" : [ "Database1", "Database2" ]
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The document value to insert",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "key" : {
                    "type" : "string",
                    "example" : "Signs 0utplayyyy"
                  },
                  "document" : {
                    "type" : "object",
                    "example" : {
                      "Name" : "Peter"
                    }
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Database" ],
        "summary" : "Creates a new document in a database",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "parameters" : [ {
          "name" : "key",
          "in" : "query",
          "required" : true,
          "description" : "The key to delete from a database",
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Database" ],
        "summary" : "Deletes a document from the database",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/clear" : {
      "get" : {
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Clears a database",
        "description" : "Clears the content of the given database.",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/keys" : {
      "get" : {
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Get all keys in a database",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "keys" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "example" : [ "Key1", "Key2" ]
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/count" : {
      "get" : {
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Get the document count of a database",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "count" : {
                        "type" : "integer",
                        "example" : 5
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/contains" : {
      "get" : {
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "key",
          "in" : "query",
          "required" : true,
          "description" : "The key to check for",
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Checks if the provided database contains a specific key",
        "description" : "",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/get" : {
      "post" : {
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "key",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Get a specific document from a database",
        "description" : "Gets all documents out of the provided database by using the provided\nkey.\n",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "example" : [ {
                            "Name" : "Peter"
                          }, {
                            "Lastname" : "Parker"
                          } ]
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/database/{name}/find" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "Defines the search filter to get the documents",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "type" : "object",
                  "example" : {
                    "Signs" : "0utplayyyy"
                  }
                } ]
              }
            }
          }
        },
        "tags" : [ "Database" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "summary" : "Get a specific document from a database",
        "description" : "Gets all documents out of the provided database by using the provided search filter.\n",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string",
                          "example" : [ {
                            "Name" : "Peter"
                          }, {
                            "Lastname" : "Parker"
                          } ]
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/group" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The group configuration to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupConfiguration"
              }
            }
          }
        },
        "tags" : [ "Groups" ],
        "summary" : "Creates a group",
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Lists all group configurations",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "groups" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/GroupConfiguration"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/group/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the group",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Get a group configuration",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "group" : {
                        "$ref" : "#/components/schemas/GroupConfiguration"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Deletes a group",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/group/{name}/exists" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the group",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Checks if a groups exists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/group" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The permission group to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermissionGroup"
              }
            }
          }
        },
        "tags" : [ "Permissions" ],
        "summary" : "Creates a group",
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Lists all permission groups",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "groups" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/PermissionGroup"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/group/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the permission group",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get a permission group",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "group" : {
                        "$ref" : "#/components/schemas/PermissionGroup"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Permissions" ],
        "summary" : "Deletes a permission group",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/group/{name}/exists" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the permission group",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Checks if a permission groups exists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/user" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The permission user to create or update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermissionUser"
              }
            }
          }
        },
        "tags" : [ "Permissions" ],
        "summary" : "Creates or updates a permission user",
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/user/{identifier}" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the permission user",
        "example" : "62b37d32-3305-475a-bf26-9abee4b0b90f",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Get a permission user by his name or unique id",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "user" : {
                        "$ref" : "#/components/schemas/PermissionUser"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Permissions" ],
        "summary" : "Deletes a permission user",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/permission/user/{identifier}/exists" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "example" : "62b37d32-3305-475a-bf26-9abee4b0b90f",
        "description" : "The name or unique id of the permission user",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Permissions" ],
        "summary" : "Check if a permission user exists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/player" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The player to create or update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfflinePlayer"
              }
            }
          }
        },
        "tags" : [ "Player" ],
        "summary" : "Creates or updates an offline player",
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/player/onlineCount" : {
      "get" : {
        "tags" : [ "Player" ],
        "summary" : "Get the number of online players",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "onlineCount" : {
                        "type" : "integer",
                        "example" : 10
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/player/registeredCount" : {
      "get" : {
        "tags" : [ "Player" ],
        "summary" : "Get the number of registered players",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "registeredCount" : {
                        "type" : "integer",
                        "example" : 10
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/player/{identifier}" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the player to get",
        "example" : "bcc582ed-494d-4b93-86cb-b58564651a26",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Player" ],
        "summary" : "Get a player by his unique id or name",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "player" : {
                        "$ref" : "#/components/schemas/OfflinePlayer"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Player" ],
        "summary" : "Deletes a player by his unique id or name",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/player/{identifier}/exists" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the player to check for",
        "example" : "bcc582ed-494d-4b93-86cb-b58564651a26",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Player" ],
        "summary" : "Checks if a specific player is registered",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/task" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The task to create or edit",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceTask"
              }
            }
          }
        },
        "tags" : [ "Tasks" ],
        "summary" : "Create or edit a task",
        "responses" : {
          "200" : {
            "description" : "The request was ok but the task couldn't be created / edited",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "success" : {
                      "type" : "boolean",
                      "default" : false
                    }
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "The task was created / edited successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Lists all registered tasks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "tasks" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/ServiceTask"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/task/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the task",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get a task by its name",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "task" : {
                        "$ref" : "#/components/schemas/ServiceTask"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Deletes a task",
        "responses" : {
          "200" : {
            "description" : "The task was deleted successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/task/{name}/exists" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "required" : true,
        "description" : "The name of the task",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Check if a service task by the provided name exists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/auth" : {
      "post" : {
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "tags" : [ "Session Management" ],
        "summary" : "Authenticate a user at the rest endpoint",
        "description" : "When sending a request to that endpoint containing a Authorization header\nwith a basic http auth value, the endpoint will generate a bearer token\nfor further api requests which is by default valid for one hour. You\ncan call /refresh with the token to get a new one which is again one hour\nvalid (by default).\n",
        "responses" : {
          "200" : {
            "description" : "Successfully authenticated the user at the rest endpoint. The resulting\njson object will contain the bearer token for further requests to the\nendpoint.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginSuccess"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/session/logout" : {
      "post" : {
        "tags" : [ "Session Management" ],
        "summary" : "Inavlidates the session",
        "description" : "Invalidates the session the sent bearer token belongs to, meaning that\nthe user can no longer sent requests to the rest endpoint and needs to\nre-authenticate when needed\n",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/session/refresh" : {
      "post" : {
        "tags" : [ "Session Management" ],
        "summary" : "Refreshes a session",
        "description" : "Refreshes the session of a user by adding another hour (by default) of\nsession time to it. The response will contain a need token when the session\nwas refreshed successfully.\n",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginSuccess"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service" : {
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Lists all known services",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "services" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/ServiceInfoSnapshot"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Shows a specific service if it's exists",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "snapshot" : {
                        "$ref" : "#/components/schemas/ServiceInfoSnapshot"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "delete" : {
        "tags" : [ "Services" ],
        "summary" : "Deletes a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/lifecycle" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "target",
        "in" : "query",
        "required" : true,
        "description" : "The target service lifecycle",
        "schema" : {
          "type" : "string",
          "enum" : [ "start", "stop", "restart"]
        }
      } ],
      "patch" : {
        "tags" : [ "Services" ],
        "summary" : "Updates the lifecycle of a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/include" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "type",
        "in" : "query",
        "required" : true,
        "description" : "The type of inclusion to include",
        "schema" : {
          "type" : "string",
          "enum" : [ "templates", "inclusions" ]
        }
      } ],
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Includes a specific type of inclusion added to a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/deployResources" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "remove",
        "in" : "query",
        "required" : false,
        "description" : "If the deployments should be removed afterwards",
        "schema" : {
          "type" : "boolean",
          "default" : true
        }
      } ],
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Deploys all waiting deployments of a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/logLines" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Get the cached log lines of a service",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "lines" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "example" : [ "Line1", "Line2" ]
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/liveLog" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Services" ],
        "summary" : "Live console of a service",
        "description" : "Upgrades the connection to a web socket connection and sends all new log lines\nreceived to the connection\n",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/create" : {
      "post" : {
        "tags" : [ "Services" ],
        "summary" : "Creates a new service",
        "requestBody" : {
          "required" : true,
          "description" : "The request body can contain a service configuration, a service task or a name of a\nservice task to base the new service on. The start boolean in the body defines whether\nthe service should get started after the creation.\n",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "properties" : {
                    "start" : {
                      "type" : "boolean",
                      "default" : false
                    },
                    "serviceConfiguration" : {
                      "$ref" : "#/components/schemas/ServiceConfiguration"
                    }
                  }
                }, {
                  "properties" : {
                    "start" : {
                      "type" : "boolean",
                      "default" : false
                    },
                    "task" : {
                      "$ref" : "#/components/schemas/ServiceTask"
                    }
                  }
                }, {
                  "properties" : {
                    "start" : {
                      "type" : "boolean",
                      "default" : false
                    },
                    "serviceTaskName" : {
                      "type" : "string",
                      "example" : "Lobby"
                    }
                  }
                } ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "result" : {
                        "$ref" : "#/components/schemas/ServiceCreateResult"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/add" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "type",
        "in" : "query",
        "required" : true,
        "description" : "The type of",
        "schema" : {
          "type" : "string",
          "enum" : [ "template", "deployment", "inclusion" ]
        }
      }, {
        "name" : "flush",
        "in" : "query",
        "required" : false,
        "description" : "If the inclusions/deployments of the service should be included/deployed after the add\n",
        "schema" : {
          "type" : "boolean",
          "default" : false
        }
      } ],
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The inclusion/deployment to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "properties" : {
                    "template" : {
                      "$ref" : "#/components/schemas/ServiceTemplate"
                    }
                  }
                }, {
                  "properties" : {
                    "removeDeployments" : {
                      "type" : "boolean",
                      "default" : true
                    },
                    "deployment" : {
                      "$ref" : "#/components/schemas/ServiceDeployment"
                    }
                  }
                }, {
                  "properties" : {
                    "inclusion" : {
                      "$ref" : "#/components/schemas/ServiceRemoteInclusion"
                    }
                  }
                } ]
              }
            }
          }
        },
        "tags" : [ "Services" ],
        "summary" : "Adds an inclusion/deployment to a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/service/{identifier}/command" : {
      "parameters" : [ {
        "name" : "identifier",
        "in" : "path",
        "required" : true,
        "description" : "The name or unique id of the service",
        "schema" : {
          "type" : "string"
        }
      } ],
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The command to execute on the service",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "command" : {
                    "type" : "string",
                    "example" : "whitelist on"
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Services" ],
        "summary" : "Executes the specified command on a service",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/templateStorage" : {
      "get" : {
        "tags" : [ "Template Storage" ],
        "summary" : "Shows every available template storage",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "storages" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "example" : [ "local", "ftp" ]
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/templateStorage/{storage}/templates" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "description" : "The name of the template storage",
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Template Storage" ],
        "summary" : "List every template in the given storage",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "templates" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/ServiceTemplate"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file/download" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Download a file from the specified template",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Disposition" : {
                "description" : "A header indicating that the content is expected to be displayed\nas an attachment, that is downloaded and saved locally.\n",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "description" : "The path requested doesn't exist in the template or is a directory\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file/info" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Get information about a path in a template",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "info" : {
                        "$ref" : "#/components/schemas/FileInfo"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "description" : "The path requested doesn't exist in the template",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file/exists" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Checks whether a file/directory exists at the specified path",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "exists" : {
                        "type" : "boolean",
                        "example" : true
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/download" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Download a template as a zip file",
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "Content-Disposition" : {
                "description" : "A header indicating that the content is expected to be displayed\nas an attachment, that is downloaded and saved locally.\n",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/zip" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/directory/list" : {
      "get" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "directory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "deep",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Lists all files in a template's directory",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "files" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/FileInfo"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/create" : {
      "put" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Creates a template in a storage",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/install" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "Information about the type and version to install",
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "properties" : {
                    "force" : {
                      "type" : "boolean",
                      "default" : false
                    },
                    "type" : {
                      "$ref" : "#/components/schemas/ServiceVersionType"
                    },
                    "version" : {
                      "$ref" : "#/components/schemas/ServiceVersion"
                    }
                  }
                }, {
                  "properties" : {
                    "force" : {
                      "type" : "boolean",
                      "default" : false
                    },
                    "typeName" : {
                      "type" : "string",
                      "example" : "paperspigot"
                    },
                    "versionName" : {
                      "type" : "string",
                      "example" : "latest"
                    }
                  }
                } ]
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Installs a service version in a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/deploy" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The content of the template in zip form",
          "content" : {
            "application/zip" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Deploys the zip archive into a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file/create" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The content of the file",
          "content" : {
            "*" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Creates/Overrides a file in a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "description" : "File not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file/append" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The content of the file",
          "content" : {
            "*" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Appends the content to a file in a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "description" : "File not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/directory/create" : {
      "post" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Creates a directory in a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}" : {
      "delete" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Deletes a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/template/{storage}/{prefix}/{name}/file" : {
      "delete" : {
        "parameters" : [ {
          "name" : "storage",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prefix",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Templates" ],
        "summary" : "Deletes a file or directory from a template",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/serviceversion" : {
      "get" : {
        "tags" : [ "Service Versions" ],
        "summary" : "Lists all available service version types",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "versions" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/ServiceVersionType"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/serviceversion/{version}" : {
      "parameters" : [ {
        "name" : "version",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "Service Versions" ],
        "summary" : "Get a specific service version type",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "version" : {
                        "$ref" : "#/components/schemas/ServiceVersionType"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/serviceversion/load" : {
      "get" : {
        "parameters" : [ {
          "name" : "url",
          "in" : "query",
          "required" : false,
          "description" : "The url to load the service types from. If no url is provided the service types\nloaded are the fallback types compiled into the jar file.\n",
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Service Versions" ],
        "summary" : "Loads the service types into the service type provider",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/serviceversion/add" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The service type to add to the service type provider",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceVersionType"
              }
            }
          }
        },
        "tags" : [ "Service Versions" ],
        "summary" : "Adds a service version type to the service type provider",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module" : {
      "get" : {
        "tags" : [ "Modules" ],
        "summary" : "Lists all loaded modules",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "modules" : {
                        "type" : "array",
                        "items" : {
                          "$ref" : "#/components/schemas/ModuleInfo"
                        }
                      }
                    }
                  } ]
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module/reload" : {
      "get" : {
        "tags" : [ "Modules" ],
        "summary" : "Unloads and loads all loaded modules",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module/{name}" : {
      "get" : {
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Get the information about a specific module",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "$ref" : "#/components/schemas/ModuleInfo"
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module/{name}/reload" : {
      "get" : {
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Unloads and loads a specific module",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module/{name}/unload" : {
      "get" : {
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Unloads a specific module",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/module/{name}/config" : {
      "get" : {
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Get the configuration file of a module",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "properties" : {
                      "config" : {
                        "type" : "object"
                      }
                    }
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      },
      "put" : {
        "requestBody" : {
          "required" : true,
          "description" : "The updated configuration file of the module",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Updates the configuration file of a module",
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/Success"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "403" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/module/{name}/load" : {
      "post" : {
        "requestBody" : {
          "required" : true,
          "description" : "The jar file of the module to copy and load",
          "content" : {
            "application/java-archive" : {
              "schema" : {
                "type" : "object"
              }
            }
          }
        },
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "tags" : [ "Modules" ],
        "summary" : "Copies a module from the request body and loads it",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/Success"
                  }, {
                    "$ref" : "#/components/schemas/ModuleInfo"
                  } ]
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          }
        }
      }
    }
  },
  "servers" : [ {
    "url" : "{protocol}://{host}:{port}/api/v2/",
    "variables" : {
      "protocol" : {
        "enum" : [ "http", "https" ],
        "default" : "https"
      },
      "host" : {
        "default" : "127.0.0.1",
        "description" : "The host of your CloudNet's web server instance"
      },
      "port" : {
        "default" : "2812",
        "description" : "The port of your CloudNet's web server instance"
      }
    }
  } ],
  "components" : {
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    },
    "responses" : {
      "Success" : {
        "description" : "The action was executed",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Success"
            }
          }
        }
      },
      "NotFound" : {
        "description" : "The specified resource was not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          },
          "text/plain" : {
            "example" : "Resource not found!"
          }
        }
      },
      "Unauthorized" : {
        "description" : "The the credentials for a successful login are missing",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "The user has not the required permissions to execute that action\n",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest" : {
        "description" : "The request sent to the server does not contain all necessary information\nor a specific information provided is invalid.\n",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas" : {
      "NetworkClusterNode" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "uniqueId" : {
              "type" : "string",
              "example" : "Node-1"
            },
            "listeners" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/HostAndPort"
              }
            }
          }
        } ]
      },
      "NodeConfiguration" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "identity" : {
              "$ref" : "#/components/schemas/NetworkClusterNode"
            },
            "clusterConfig" : {
              "type" : "object",
              "properties" : {
                "clusterId" : {
                  "type" : "string",
                  "example" : "a0e8765e-7853-455b-bb2b-7a022a607be2"
                },
                "nodes" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkClusterNode"
                  }
                }
              }
            },
            "ipWhitelist" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "192.168.56.1", "127.0.0.1" ]
            },
            "maxCPUUsageToStartServices" : {
              "type" : "number",
              "example" : 90.0
            },
            "maxMemory" : {
              "type" : "number",
              "example" : 2048
            },
            "maxServiceConsoleLogCacheSize" : {
              "type" : "integer",
              "example" : 128
            },
            "processTerminationTimeoutSeconds" : {
              "type" : "integer",
              "example" : 5
            },
            "forceInitialClusterDataSync" : {
              "type" : "boolean",
              "example" : true
            },
            "printErrorStreamLinesFromServices" : {
              "type" : "boolean",
              "example" : true
            },
            "runBlockedServiceStartTryLaterAutomatic" : {
              "type" : "boolean",
              "example" : true
            },
            "jvmCommand" : {
              "type" : "string",
              "example" : "java"
            },
            "hostAddress" : {
              "type" : "string",
              "example" : "127.0.0.1"
            },
            "connectHostAddress" : {
              "type" : "string",
              "example" : "127.0.0.1"
            },
            "httpListeners" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/HostAndPort"
              }
            },
            "clientSslConfig" : {
              "$ref" : "#/components/schemas/ConfigurationOptionSSL"
            },
            "serverSslConfig" : {
              "$ref" : "#/components/schemas/ConfigurationOptionSSL"
            },
            "webSslConfig" : {
              "$ref" : "#/components/schemas/ConfigurationOptionSSL"
            }
          }
        } ]
      },
      "ConfigurationOptionSSL" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "example" : false
          },
          "clientAuth" : {
            "type" : "boolean",
            "example" : true
          },
          "trustCertificatePath" : {
            "type" : "string",
            "example" : null
          },
          "certificatePath" : {
            "type" : "string",
            "example" : "local/certificate.pem"
          },
          "privateKeyPath" : {
            "type" : "string",
            "example" : "local/privateKey.key"
          }
        }
      },
      "NetworkClusterNodeInfoSnapshot" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "node" : {
              "$ref" : "#/components/schemas/NetworkClusterNode"
            },
            "state" : {
              "type" : "string",
              "enum" : [ "UNAVAILABLE", "SYNCING", "READY", "DISCONNECTED" ],
              "example" : "READY"
            },
            "head" : {
              "type" : "boolean",
              "example" : false
            },
            "local" : {
              "type" : "boolean",
              "example" : true
            },
            "nodeInfoSnapshot" : {
              "type" : "object",
              "allOf" : [ {
                "$ref" : "#/components/schemas/JsonDocPropertyable"
              }, {
                "properties" : {
                  "creationTime" : {
                    "type" : "number",
                    "example" : "1620819600457"
                  },
                  "startupMillis" : {
                    "type" : "number",
                    "example" : "1620819600457"
                  },
                  "maxMemory" : {
                    "type" : "number",
                    "example" : 2048
                  },
                  "usedMemory" : {
                    "type" : "number",
                    "example" : 512
                  },
                  "reservedMemory" : {
                    "type" : "number",
                    "example" : 1024
                  },
                  "currentServicesCount" : {
                    "type" : "integer",
                    "example" : 5
                  },
                  "drain" : {
                    "type" : "boolean",
                    "example" : false
                  },
                  "node" : {
                    "$ref" : "#/components/schemas/NetworkClusterNode"
                  },
                  "version" : {
                    "$ref" : "#/components/schemas/CloudNetVersion"
                  },
                  "processSnapshot" : {
                    "$ref" : "#/components/schemas/ProcessSnapshot"
                  },
                  "maxCPUUsageToStartServices" : {
                    "type" : "number",
                    "example" : 90
                  },
                  "modules" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/ModuleConfiguration"
                    }
                  }
                }
              } ]
            }
          }
        } ]
      },
      "LoginSuccess" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Success"
        }, {
          "properties" : {
            "token" : {
              "type" : "string",
              "example" : "eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDbG91ZE5ldCBOb2RlLTEiLCJzdWIiOiJkZXJrbGFybyIsImp0aSI6IjAwY2ViMDIwLTI3ZDctNGRkYy05YTczLTMwYmIzMTA2ODE0OSIsImlhdCI6MTYyMDc0OTA0MCwidW5pcXVlSWQiOiI0YjljODMzYi05MWM2LTRkOTMtOWM1NC0zNjg0ODE2NzQ0MzgiLCJleHAiOjE2MjA3NTI2NDB9.-d0Ll4f2CPQueNxN89iWB73wZEt0UeWElv-caAzaKLE"
            },
            "id" : {
              "type" : "string",
              "example" : "62b37d32-3305-475a-bf26-9abee4b0b90f"
            }
          }
        } ]
      },
      "JsonDocPropertyable" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "type" : "object",
            "example" : { }
          }
        }
      },
      "ServiceRemoteInclusion" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "url" : {
              "type" : "string",
              "example" : "https://my-plugins.de/cool.jar"
            },
            "destination" : {
              "type" : "string",
              "example" : "plugins/cool.jar"
            }
          }
        } ]
      },
      "ServiceDeployment" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "template" : {
              "$ref" : "#/components/schemas/ServiceTemplate"
            },
            "excludes" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "spigot.jar", "plugins/cool.jar" ]
            },
            "includes" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "spigot.jar", "plugins/cool.jar" ]
            }
          }
        } ]
      },
      "ServiceConfigurationBase" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "templates" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceTemplate"
              }
            },
            "deployments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceDeployment"
              }
            },
            "includes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceRemoteInclusion"
              }
            }
          }
        } ]
      },
      "GroupConfiguration" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceConfigurationBase"
        }, {
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "Lobby"
            },
            "jvmOptions" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "Option1", "Option2" ]
            },
            "processParameters" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "Parameter1", "Parameter2" ]
            },
            "targetEnvironments" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "MINECRAFT_SERVER", "VELOCITY" ]
            }
          }
        } ]
      },
      "PermissionGroup" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Permissible"
        }, {
          "properties" : {
            "color" : {
              "type" : "string",
              "example" : "&6"
            },
            "prefix" : {
              "type" : "string",
              "example" : "&7Player"
            },
            "suffix" : {
              "type" : "string",
              "example" : "&a"
            },
            "display" : {
              "type" : "string",
              "example" : "&7Player"
            },
            "sortId" : {
              "type" : "integer",
              "example" : 50
            },
            "defaultGroup" : {
              "type" : "boolean",
              "example" : true
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "Permission" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "cloudnet.*"
          },
          "potency" : {
            "type" : "integer",
            "example" : 50
          },
          "timeOutMillis" : {
            "type" : "number",
            "example" : -1
          }
        }
      },
      "PermissionUser" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Permissible"
        }, {
          "properties" : {
            "uniqueId" : {
              "type" : "string",
              "example" : "62b37d32-3305-475a-bf26-9abee4b0b90f"
            },
            "hashedPassword" : {
              "type" : "string",
              "example" : "pmWkWSBCL51Bfkhn79xPuKBKHz//H6B+mY6G9/eieuM=",
              "description" : "A sha-256 hashed string encoded in base64"
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "group" : {
                    "type" : "string",
                    "example" : "Admin"
                  },
                  "timeOutMillis" : {
                    "type" : "number",
                    "example" : -1
                  }
                }
              }
            }
          }
        } ]
      },
      "Permissible" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "Player"
            },
            "potency" : {
              "type" : "integer",
              "example" : 10
            },
            "createdTime" : {
              "type" : "number",
              "example" : 1642377151
            },
            "permissions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Permission"
              }
            },
            "groupPermissions" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Permission"
                }
              }
            }
          }
        } ]
      },
      "OfflinePlayer" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "derklaro"
            },
            "firstLoginTimeMillis" : {
              "type" : "number",
              "example" : 1642409856
            },
            "lastLoginTimeMillis" : {
              "type" : "number",
              "example" : 1642409856
            },
            "lastNetworkPlayerProxyInfo" : {
              "$ref" : "#/components/schemas/NetworkPlayerProxyInfo"
            }
          }
        } ]
      },
      "NetworkPlayerProxyInfo" : {
        "type" : "object",
        "properties" : {
          "uniqueId" : {
            "type" : "string",
            "example" : "05bf52c6-7bb0-4f13-8951-0e1fd803df35"
          },
          "name" : {
            "type" : "string",
            "example" : "TheMeinerLP"
          },
          "xBoxId" : {
            "type" : "string",
            "example" : null
          },
          "version" : {
            "type" : "integer",
            "example" : 47
          },
          "address" : {
            "$ref" : "#/components/schemas/HostAndPort"
          },
          "listener" : {
            "$ref" : "#/components/schemas/HostAndPort"
          },
          "onlineMode" : {
            "type" : "boolean",
            "example" : true
          },
          "networkService" : {
            "$ref" : "#/components/schemas/NetworkServiceInfo"
          }
        }
      },
      "NetworkServiceInfo" : {
        "type" : "object",
        "properties" : {
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "serviceId" : {
            "$ref" : "#/components/schemas/ServiceId"
          }
        }
      },
      "ServiceTemplate" : {
        "type" : "object",
        "properties" : {
          "prefix" : {
            "type" : "string",
            "example" : "Global"
          },
          "name" : {
            "type" : "string",
            "example" : "server"
          },
          "storage" : {
            "type" : "string",
            "example" : "local"
          },
          "priority" : {
            "type" : "integer",
            "example" : 5
          },
          "alwaysCopyToStaticServices" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "NodeInfo" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Success"
        }, {
          "properties" : {
            "version" : {
              "$ref" : "#/components/schemas/CloudNetVersion"
            },
            "nodeInfoSnapshot" : {
              "$ref" : "#/components/schemas/NetworkClusterNodeInfoSnapshot"
            },
            "lastNodeInfoSnapshot" : {
              "$ref" : "#/components/schemas/NetworkClusterNodeInfoSnapshot"
            },
            "serviceCount" : {
              "type" : "integer",
              "example" : 0
            },
            "clientConnections" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : [ "127.0.0.1:1411", "127.0.0.1:1412" ]
              }
            }
          }
        } ]
      },
      "ProcessSnapshot" : {
        "type" : "object",
        "properties" : {
          "pid" : {
            "type" : "integer",
            "example" : 8168
          },
          "cpuUsage" : {
            "type" : "number",
            "example" : 0.7781862806132257
          },
          "systemCpuUsage" : {
            "type" : "number",
            "example" : 0.7781862806132257
          },
          "maxHeapMemory" : {
            "type" : "number",
            "example" : 2111832064
          },
          "heapUsageMemory" : {
            "type" : "number",
            "example" : 230091112
          },
          "noHeapUsageMemory" : {
            "type" : "number",
            "example" : 46906136
          },
          "unloadedClassCount" : {
            "type" : "number",
            "example" : 21
          },
          "totalLoadedClassCount" : {
            "type" : "number",
            "example" : 5940
          },
          "currentLoadedClassCount" : {
            "type" : "number",
            "example" : 5919
          },
          "threads" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ThreadSnapshot"
            }
          }
        }
      },
      "ThreadSnapshot" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "example" : 5
          },
          "priority" : {
            "type" : "integer",
            "example" : 1
          },
          "daemon" : {
            "type" : "boolean",
            "example" : true
          },
          "name" : {
            "type" : "string",
            "example" : "WindowsStreamPump"
          },
          "threadState" : {
            "type" : "string",
            "enum" : [ "NEW", "RUNNABLE", "BLOCKED", "WAITING", "TIMED_WAITING", "TERMINATED" ],
            "example" : "RUNNABLE"
          }
        }
      },
      "ModuleConfiguration" : {
        "type" : "object",
        "properties" : {
          "runtimeModule" : {
            "type" : "boolean",
            "example" : false
          },
          "storesSensitiveData" : {
            "type" : "boolean",
            "example" : true
          },
          "group" : {
            "type" : "string",
            "example" : "eu.cloudnetservice.modules"
          },
          "name" : {
            "type" : "string",
            "example" : "CloudNet-CloudFlare"
          },
          "version" : {
            "type" : "string",
            "example" : "1.1"
          },
          "main" : {
            "type" : "string",
            "example" : "eu.cloudnetservice.modules.cloudflare.CloudNetCloudflareModule"
          },
          "description" : {
            "type" : "string",
            "example" : "Node extension for the https://cloudflare.com REST-API"
          },
          "author" : {
            "type" : "string",
            "example" : "CloudNetService"
          },
          "website" : {
            "type" : "string",
            "example" : "https://cloudnetservice.eu"
          },
          "dataFolder" : {
            "type" : "string",
            "example" : null
          },
          "repositories" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "example" : "CloudNet"
                },
                "url" : {
                  "type" : "string",
                  "example" : "https://repo.cloudnetservice.eu/"
                }
              }
            }
          },
          "dependencies" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "repo" : {
                  "type" : "string",
                  "example" : "CloudNet"
                },
                "url" : {
                  "type" : "string",
                  "example" : "https://repo.cloudnetservice.eu/"
                },
                "group" : {
                  "type" : "string",
                  "example" : "eu.cloudnetservice.cloudnet"
                },
                "name" : {
                  "type" : "string",
                  "example" : "CloudNet-Bridge"
                },
                "version" : {
                  "type" : "string",
                  "example" : "1.1"
                }
              }
            }
          },
          "minJavaVersionId" : {
            "type" : "integer",
            "example" : 11
          },
          "properties" : {
            "type" : "object",
            "example" : { }
          }
        }
      },
      "ProcessConfiguration" : {
        "type" : "object",
        "properties" : {
          "environment" : {
            "type" : "string",
            "example" : "MINECRAFT_SERVER"
          },
          "maxHeapMemorySize" : {
            "type" : "integer",
            "example" : 512
          },
          "jvmOptions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ "Option1", "Option2" ]
          },
          "processParameters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ "Parameter1", "Parameter2" ]
          },
          "environmentVariables" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "example" : {
              "MYSQL_PASSWORD" : "PASSWORD"
            }
          }
        }
      },
      "ServiceTask" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServiceConfigurationBase"
        }, {
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "Lobby",
              "pattern" : "^[a-zA-Z0-9._\\-*]*$"
            },
            "runtime" : {
              "type" : "string",
              "example" : "jvm"
            },
            "javaCommand" : {
              "type" : "string",
              "example" : "java"
            },
            "nameSplitter" : {
              "type" : "string",
              "example" : "-"
            },
            "disableIpRewrite" : {
              "type" : "boolean",
              "example" : true
            },
            "maintenance" : {
              "type" : "boolean",
              "example" : false
            },
            "autoDeleteOnStop" : {
              "type" : "boolean",
              "example" : false
            },
            "staticServices" : {
              "type" : "boolean",
              "example" : true
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "Lobby", "Global-Lobby" ]
            },
            "associatedNodes" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "Node-1", "Node-2" ]
            },
            "deletedFilesAfterStop" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "server.properties", "plugins/cool/config.json" ]
            },
            "processConfiguration" : {
              "$ref" : "#/components/schemas/ProcessConfiguration"
            },
            "startPort" : {
              "type" : "integer",
              "example" : 25565
            },
            "minServiceCount" : {
              "type" : "integer",
              "example" : 2
            }
          }
        } ]
      },
      "ServiceId" : {
        "type" : "object",
        "properties" : {
          "taskName" : {
            "type" : "string",
            "example" : "Lobby"
          },
          "nameSplitter" : {
            "type" : "string",
            "example" : "-"
          },
          "environmentName" : {
            "type" : "string",
            "example" : "MINECRAFT_SERVER"
          },
          "allowedNodes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ "Node-1", "Node-2" ]
          },
          "uniqueId" : {
            "type" : "string",
            "example" : "43a9e824-cc3c-459b-b574-4f41e6509bda"
          },
          "taskServiceId" : {
            "type" : "integer",
            "example" : 2
          },
          "nodeUniqueId" : {
            "type" : "string",
            "example" : "Node-2"
          },
          "environment" : {
            "$ref" : "#/components/schemas/ServiceEnvironmentType"
          }
        }
      },
      "ServiceConfiguration" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "retryConfiguration" : {
              "$ref" : "#/components/schemas/ServiceCreateRetryConfiguration"
            },
            "serviceId" : {
              "$ref" : "#/components/schemas/ServiceId"
            },
            "processConfig" : {
              "$ref" : "#/components/schemas/ProcessConfiguration"
            },
            "runtime" : {
              "type" : "string",
              "example" : "jvm"
            },
            "javaCommand" : {
              "type" : "string",
              "example" : "java"
            },
            "autoDeleteOnStop" : {
              "type" : "boolean",
              "example" : true
            },
            "staticService" : {
              "type" : "boolean",
              "example" : true
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "Lobby", "Lobby-Global" ]
            },
            "deletedFilesAfterStop" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "example" : [ "server.properties", "plugins/cool/config.json" ]
            },
            "templates" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceTemplate"
              }
            },
            "deployments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceDeployment"
              }
            },
            "includes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ServiceRemoteInclusion"
              }
            },
            "port" : {
              "type" : "integer",
              "example" : 25565
            }
          }
        } ]
      },
      "ServiceInfoSnapshot" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "creationTime" : {
              "type" : "number",
              "example" : 1620824797570
            },
            "address" : {
              "$ref" : "#/components/schemas/HostAndPort"
            },
            "connectAddress" : {
              "$ref" : "#/components/schemas/HostAndPort"
            },
            "processSnapshot" : {
              "$ref" : "#/components/schemas/ProcessSnapshot"
            },
            "configuration" : {
              "$ref" : "#/components/schemas/ServiceConfiguration"
            },
            "connectedTime" : {
              "type" : "number",
              "example" : 1620824797599
            },
            "lifeCycle" : {
              "type" : "string",
              "enum" : [ "PREPARED", "RUNNING", "STOPPED", "DELETED" ],
              "example" : "PREPARED"
            }
          }
        } ]
      },
      "ServiceCreateRetryConfiguration" : {
        "type" : "object",
        "properties" : {
          "maxRetries" : {
            "type" : "integer",
            "example" : 5
          },
          "backoffStrategy" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "example" : [ 500, 1500 ]
            }
          },
          "eventReceivers" : {
            "type" : "object"
          }
        }
      },
      "ServiceCreateResult" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "enum" : [ "CREATED", "DEFERRED", "FAILED" ]
          },
          "creationId" : {
            "type" : "string",
            "example" : "43a9e824-cc3c-459b-b574-4f41e6509bda"
          },
          "serviceInfo" : {
            "$ref" : "#/components/schemas/ServiceInfoSnapshot"
          }
        }
      },
      "HostAndPort" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "example" : "127.0.0.1"
          },
          "port" : {
            "type" : "integer",
            "example" : 1410
          }
        }
      },
      "FileInfo" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "example" : "plugins/cool.jar"
          },
          "name" : {
            "type" : "string",
            "example" : "cool.jar"
          },
          "directory" : {
            "type" : "boolean",
            "example" : false
          },
          "hidden" : {
            "type" : "boolean",
            "example" : false
          },
          "creationTime" : {
            "type" : "number",
            "example" : 1619200785568
          },
          "lastModified" : {
            "type" : "number",
            "example" : 1619200785568
          },
          "lastAccess" : {
            "type" : "number",
            "example" : 1620804114355
          },
          "size" : {
            "type" : "number",
            "example" : 13785007
          }
        }
      },
      "ServiceVersion" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "latest"
          },
          "url" : {
            "type" : "string",
            "example" : "https://api.papermc.io/v2/projects/paper/versions/1.14.4/builds/243/downloads/paper-1.14.4-243.jar"
          },
          "minJavaVersion" : {
            "type" : "integer",
            "example" : 8
          },
          "maxJavaVersion" : {
            "type" : "integer",
            "example" : 11
          },
          "deprecated" : {
            "type" : "boolean",
            "example" : false
          },
          "cacheFiles" : {
            "type" : "boolean",
            "example" : false
          },
          "properties" : {
            "type" : "object",
            "example" : { }
          },
          "additionalDownloads" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "ServiceVersionType" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "paperspigot"
          },
          "environmentType" : {
            "type" : "string",
            "example" : "MINECRAFT_SERVER"
          },
          "installSteps" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "example" : [ "DOWNLOAD", "BUILD", "UNZIP", "COPY_FILTER" ]
          },
          "versions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServiceVersion"
            }
          }
        }
      },
      "ServiceEnvironmentType" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonDocPropertyable"
        }, {
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "MINECRAFT_SERVER"
            },
            "defaultServiceStartPort" : {
              "type" : "integer",
              "example" : 25565
            },
            "defaultProcessArguments" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        } ]
      },
      "ModuleInfo" : {
        "type" : "object",
        "properties" : {
          "lifecycle" : {
            "type" : "string",
            "enum" : [ "CREATED", "LOADED", "STARTED", "RELOADING", "STOPPED", "UNLOADED", "UNUSEABLE" ]
          },
          "configuration" : {
            "$ref" : "#/components/schemas/ModuleConfiguration"
          }
        }
      },
      "CloudNetVersion" : {
        "type" : "object",
        "properties" : {
          "major" : {
            "type" : "integer",
            "example" : 4
          },
          "minor" : {
            "type" : "integer",
            "example" : 0
          },
          "patch" : {
            "type" : "integer",
            "example" : 1
          },
          "revision" : {
            "type" : "string",
            "example" : "5dd7f63"
          },
          "versionType" : {
            "type" : "string",
            "example" : "RELEASE"
          },
          "versionTitle" : {
            "type" : "string",
            "example" : "Blizzard"
          }
        }
      },
      "Success" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "default" : false,
            "description" : "This boolean will always be false when an error occurred"
          },
          "reason" : {
            "type" : "string",
            "example" : "Error message",
            "description" : "The error that occurred during the processing of the request"
          }
        }
      }
    }
  }
}
